security:
    role_hierarchy:
        ROLE_DEPUTY_DIRECTOR: ROLE_USER
        ROLE_DIRECTOR: ROLE_DEPUTY_DIRECTOR
        ROLE_MODERATOR: ROLE_DIRECTOR
        ROLE_ADMIN: ROLE_MODERATOR

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Users\Domain\Entity\User
                property: email
    firewalls:
#        login:
#            pattern: ^/api/login
#            pattern: ^/api/auth/token/login
#            stateless: true
#            json_login:
#                check_path: /api/auth/token/login
#                check_path: /api/login_check
#                username_path: email
#                password_path: password
#                success_handler: lexik_jwt_authentication.handler.authentication_success
#                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            entry_point: jwt
            json_login:
#                check_path: /api/login
                check_path: /api/auth/token/login # or, if you have defined a route for your login path, the route name you used
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
            refresh_jwt:
                check_path: /api/auth/token/refresh # or, you may use the `api_refresh_token` route name

    access_control:
        - { path: ^/api/auth/token/login, roles: PUBLIC_ACCESS }
#        - { path: ^/api/login, roles: PUBLIC_ACCESS  }
        - { path: ^/api/auth/token/refresh, roles: PUBLIC_ACCESS }
        - { path: ^/api/users/me,       roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: plaintext
#                algorithm: auto
#                cost: 4 # Lowest possible value for bcrypt
#                time_cost: 3 # Lowest possible value for argon
#                memory_cost: 10 # Lowest possible value for argon
